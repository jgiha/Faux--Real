@model TestApplication.Models.RegisterViewModel
@{
    ViewBag.Title = "Create a new account";
}
@section styles{
<link rel="stylesheet" href="/resources/demos/style.css">
<link href="nouislider.min.css" rel="stylesheet">
<link rel="stylesheet" href="../../jqwidgets/styles/jqx.base.css" type="text/css" />
    <style>
    .your-icon {
    float: left;
    display: block; 
}

.your-icon.icon-fun {
    background: url(https://www.shareicon.net/data/128x128/2015/10/27/662939_wine_512x512.png);
    background-size: cover;
}
    
.your-icon.icon-serious {
    background: url(https://cdn1.iconfinder.com/data/icons/marriage-glyph/64/champagne_wedding_love_festival_party-512.png);
    background-size: cover;
 
}
.your-icon.normal {
    width: 32px;
    height: 32px;
}

.your-icon.small {
    width: 16px;
    height: 16px;
}

.your-icon.medium {
    width: 64px;
    height: 64px;
}
  #slider .ui-slider-handle { background: #ffd800; }

    </style>



@Styles.Render("~/Content/typeahead")


}
@section Scripts {
<script type="text/javascript" src="../../scripts/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../../scripts/demos.js"></script>
<script type="text/javascript" src="../../jqwidgets/jqxcore.js"></script>
<script type="text/javascript" src="../../jqwidgets/jqxbuttons.js"></script>
<script type="text/javascript" src="../../jqwidgets/jqxslider.js"></script>
<script type="text/javascript">
        $(document).ready(function () {
            $('#jqxSlider').jqxSlider({ template: "primary", tooltip: true, mode: 'fixed' });
        });
</script>
<script src="https://code.jquery.com/ui/1.12.0/jquery-ui.js"></script>

@Scripts.Render("~/bundles/typeahead")
<script type="text/javascript">


  
    var qualitiesIdList = [];
    var newqualitiesIdList = [];

    $(document).ready(function () {
        initializeQualityListTypeahead();
      
    });

    function initializeQualityListTypeahead() {
     
        $("#qualityFinder").typeahead({
            highlight: true,
            minLength: 1,
            // limit: 10,
            hint: true,
        },
            {
                display: function (data) { return data.friendly},
                limit: 8,
                templates: {
                   // header: 'Qualities',
                    empty: '',
                    suggestion: function (data) {
                        return '<span class="secTip" data-toggle="tooltip" data-placement="right" title="'
                            + data.value + '" class="qualityDescription">' + data.value + '</span>';
                    },

                },
                source:
                    function (query, sync, cb) {
                        if (query !== undefined && query.length >= 1) {
                            $.get(
                                '/Quality/Find/',
                                {
                                    id: query

                                },
                                function (data) {
                                    var typeaheadData = $.grep(data, function (d) {
                                        // return all elements that haven't been selected yet.
                                        return $.grep(qualitiesIdList, function (a) {
                                            return a.id == d.QualityID;
                                        }).length == 0;
                                    }).map(function (s, index) {
                                        return {
                                            id: s.QualityID,
                                            value: s.Quality1
                                        };
                                    });
                                    cb(typeaheadData);
                                });
                        }
                    }
            }

            ).val("")
            .bind("typeahead:selected", selectQuality)
            .bind("typeahead:autocompleted", selectQuality);
    }

    function selectQuality(obj, datum, name) {
        if ($.grep(qualitiesIdList, function (a) { a.id == datum.id }).length == 0) {
            var $currentQualityMarkup = buildCurrentQualities(datum);
            $("#securityContainer").append($currentQualityMarkup);

            qualitiesIdList.push(datum);

            $("#qualityFinder").typeahead('val', '');
        }
    }

    function buildCurrentQualities(datum) {
        var qualityArrayId = "@Html.IdFor(vm => vm.QualityID)" + "[" + qualitiesIdList.length + "]";
        var $template = $("#securityNameTemplate").clone(false);

        var $currentQualityMarkup = $($template.html()
            .replace("##", "<span  data-remove='" + datum.QualityID + "' data-toggle='tooltip' data-placement='right' title='"
            + datum.value + "'><strong>"
            + datum.value + "</strong>  <span class='glyphicon glyphicon-remove ' style='color:red'></span><div class=''> <span class='small'>"
            + "</span></div><span class='small'>"
            + "</span></span>"))
         .attr("id", datum.id)
         .prop("data-array-id", qualityArrayId);

        $("<input>").attr({
            type: "hidden",
            id: qualityArrayId,
            name: qualityArrayId,
            value: datum.id,
            title: datum.value,

        }).appendTo($currentQualityMarkup);

        return $currentQualityMarkup;
    }

  
</script>
}
<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
  
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.UserName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Age, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Age, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.City, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.City, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.State, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.State, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Occupation, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Occupation, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group ">
        @Html.LabelFor(m => m.Sex, new { @class = "col-md-2 control-label" })
        <div class="col-xs-9">
            <label>
                @Html.RadioButtonFor(model => model.Sex, true) Male
            </label>
            <label>
                @Html.RadioButtonFor(model => model.Sex, false) Female
            </label>
            @Html.ValidationMessageFor(model => model.Sex)
        </div>
    </div>
    <div class="form-group ">
        @Html.LabelFor(m => m.SexLookingFor, new { @class = "col-md-2 control-label" })
        <div class="col-xs-9">
            <label>
                @Html.RadioButtonFor(model => model.SexLookingFor, true) Male
            </label>
            <label>
                @Html.RadioButtonFor(model => model.SexLookingFor, false) Female
            </label>
            @Html.ValidationMessageFor(model => model.SexLookingFor)
        </div>
    </div>
  
    <div class="form-group ">
      
            <label class="sr-only" for="@Html.IdFor(model => model.QualityID)">
             Qualities to describe yourself
            </label>
            <p class="col-xs-2 control-label">Qualities</p>
        <div class="col-xs-9">
            <div class="col-xs-4" id="scrollable-dropdown-menu">
                <input type="text" id="qualityFinder" class="form-control" placeholder="Qualities" />

            </div>
            <div id="securityContainer" class="form-group col-xs-6">
            </div>

            <div id="securityNameTemplate" class="hidden ">
               
                    <label id="popover" class="btn-primary secButton btn btn-md col-xs-4" onclick="removeSecurity($(this))  " style="white-space: normal; border-color: white;">
                        ##
                    </label>
            </div>

        </div>
    </div>
   
    @*<div id="slider-range-max"></div>

    <div id="slider-range" class="slider-range noUi-target noUi-ltr noUi-horizontal">
    </div>*@


        <div class="form-group">
            <label for="amount" class="col-md-2 col-xs-2 control-label">Intention Level:</label>
          
            <div class="col-md-10 form-group row">
                <span class="your-icon icon-fun normal control-label"></span> 
                <div class="col-md-4">
                    <div class="" id="jqxSlider" style="">
                    </div>
                </div>
                <span class="your-icon icon-serious normal "></span> 
            </div>

        </div>
            <div class="form-group ">
                @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                </div>
            </div>
        
        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Sign-up" />
            </div>
        </div>
        }

  